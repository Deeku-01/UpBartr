// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?   @unique
  firstName   String
  lastName    String
  password    String
  bio         String?
  avatar      String?
  location    String?
  rating      Float    @default(0)
  totalRatings Int     @default(0)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Skills relationships
  skillsOffered UserSkill[] // filter out later 
  
  // Exchange relationships
  exchangesAsTeacher ExchangeRequest[] @relation("Teacher")
  exchangesAsStudent ExchangeRequest[] @relation("Student")
  
  // Reviews
  reviewsGiven   Review[] @relation("ReviewGiver")
  reviewsReceived Review[] @relation("ReviewReceiver")

  @@map("users")
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  description String?
  createdAt   DateTime @default(now())

  userSkills UserSkill[]

  @@map("skills")
}

model UserSkill {
  id     String @id @default(cuid())
  userId String
  skillId String
  type   SkillType // OFFERED or WANTED
  level  SkillLevel
  yearsOfExperience Int?
  description String?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId, type])
  @@map("user_skills")
}

model ExchangeRequest {
  id                String   @id @default(cuid())
  teacherId         String
  studentId         String
  teacherSkillId    String
  studentSkillId    String
  status            ExchangeStatus @default(PENDING)
  message           String?
  proposedDuration  Int? // in minutes
  scheduledAt       DateTime?
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  teacher     User @relation("Teacher", fields: [teacherId], references: [id])
  student     User @relation("Student", fields: [studentId], references: [id])
  
  review Review?

  @@map("exchange_requests")
}

model Review {
  id         String @id @default(cuid())
  exchangeId String @unique
  giverId    String
  receiverId String
  rating     Int    @db.SmallInt
  comment    String?
  createdAt  DateTime @default(now())

  exchange ExchangeRequest @relation(fields: [exchangeId], references: [id])
  giver    User @relation("ReviewGiver", fields: [giverId], references: [id])
  receiver User @relation("ReviewReceiver", fields: [receiverId], references: [id])

  @@map("reviews")
}

enum SkillType {
  OFFERED
  WANTED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ExchangeStatus {
  PENDING
  ACCEPTED
  REJECTED
  SCHEDULED
  COMPLETED
  CANCELLED
}