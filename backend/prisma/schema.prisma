// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?   @unique
  firstName   String
  lastName    String
  password    String
  bio         String?
  avatar      String?
  location    String?
  rating      Float    @default(0)
  totalRatings Int     @default(0)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Marketplace relationships
  skillRequests     SkillRequest[]
  applications      Application[]
  skillRequestViews SkillRequestView[]
  
  // Review relationships
  reviewsGiven      Review[] @relation("ReviewGiver")
  reviewsReceived   Review[] @relation("ReviewReceiver")

  @@map("users")
}

model SkillRequest {
  id                  String   @id @default(cuid())
  authorId            String
  title               String
  description         String
  skillNeeded         String   // What skill they need
  skillOffered        String   // What skill they're offering in return
  category            String
  estimatedDuration   String?  // e.g., "2 weeks", "1 month"
  deadline            DateTime?
  location            String?
  isRemote            Boolean  @default(false)
  requirements        String[] // Array of requirements
  deliverables        String[] // What they expect to receive
  tags                String[] // Tags for better searchability
  status              SkillRequestStatus @default(OPEN)
  acceptedApplicantId String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  author       User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  applications Application[]
  views        SkillRequestView[]

  @@map("skill_requests")
}

model Application {
  id               String @id @default(cuid())
  skillRequestId   String
  applicantId      String
  message          String
  proposedTimeline String?
  portfolio        String[] // URLs to portfolio items
  experience       String?  // Relevant experience description
  whyChooseMe      String?  // Why they should be chosen
  status           ApplicationStatus @default(PENDING)
  responseMessage  String?  // Response from the skill request author
  respondedAt      DateTime?
  startedAt        DateTime?    // When work actually started
  completedAt      DateTime?    // When work was completed
  createdAt        DateTime @default(now())

  // Relations
  skillRequest SkillRequest @relation(fields: [skillRequestId], references: [id], onDelete: Cascade)
  applicant    User @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  review       Review?      // Review after completion

  @@unique([skillRequestId, applicantId])
  @@map("applications")
}

model SkillRequestView {
  id              String @id @default(cuid())
  userId          String
  skillRequestId  String
  viewedAt        DateTime @default(now())

  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillRequest SkillRequest @relation(fields: [skillRequestId], references: [id], onDelete: Cascade)

  @@unique([userId, skillRequestId])
  @@map("skill_request_views")
}

model Review {
  id            String @id @default(cuid())
  applicationId String @unique  // Link to completed application
  giverId       String
  receiverId    String
  rating        Int    @db.SmallInt
  comment       String?
  createdAt     DateTime @default(now())

  application Application @relation(fields: [applicationId], references: [id])
  giver       User @relation("ReviewGiver", fields: [giverId], references: [id])
  receiver    User @relation("ReviewReceiver", fields: [receiverId], references: [id])

  @@map("reviews")
}

// Keep only the enums you need
enum SkillRequestStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  CLOSED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
  IN_PROGRESS
  COMPLETED
}